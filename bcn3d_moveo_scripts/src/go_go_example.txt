#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <tf2_ros/transform_listener.h>
#include <tf2_ros/buffer.h>
#include <rclcpp/rclcpp.hpp>
#include <chrono>
#include <signal.h>
#include <atomic>
#include <tf2/LinearMath/Quaternion.h>
#include <tf2/LinearMath/Transform.h>
#include <tf2/convert.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>

std::atomic<bool> shutdown_requested(false);

void signalHandler(int signum) {
    shutdown_requested.store(true);
}

bool move_to_position(rclcpp::Node::SharedPtr node, moveit::planning_interface::MoveGroupInterface& move_group, const std::vector<double>& joint_values, const std::string& message) {
    RCLCPP_INFO(node->get_logger(), message.c_str());

    move_group.setJointValueTarget(joint_values);
    moveit::planning_interface::MoveGroupInterface::Plan joint_plan;

    bool joint_success = (move_group.plan(joint_plan) == moveit::core::MoveItErrorCode::SUCCESS);
    RCLCPP_INFO(node->get_logger(), "Visualizing plan %s", joint_success ? "" : "FAILED");

    if (joint_success) {
        RCLCPP_INFO(node->get_logger(), "Executing the joint trajectory.");
        move_group.execute(joint_plan);
    }

    RCLCPP_INFO(node->get_logger(), "Sleeping between moves.");
    rclcpp::sleep_for(std::chrono::seconds(3));

    return joint_success;
}

bool open_gripper(rclcpp::Node::SharedPtr node, moveit::planning_interface::MoveGroupInterface& move_group) {
    RCLCPP_INFO(node->get_logger(), "/======================== Opening the gripper =======================/");
    move_group.setNamedTarget("open");
    moveit::planning_interface::MoveGroupInterface::Plan gripper_plan;
    bool success = (move_group.plan(gripper_plan) == moveit::core::MoveItErrorCode::SUCCESS);
    RCLCPP_INFO(node->get_logger(), "Visualizing gripper open %s", success ? "" : "FAILED");
    if (success) {
        RCLCPP_INFO(node->get_logger(), "Executing the gripper open trajectory.");
        move_group.execute(gripper_plan);
        rclcpp::sleep_for(std::chrono::seconds(3));
    }
    return success;
}

bool close_gripper(rclcpp::Node::SharedPtr node, moveit::planning_interface::MoveGroupInterface& move_group) {
    RCLCPP_INFO(node->get_logger(), "/======================== Closing the gripper =======================/");
    move_group.setNamedTarget("close");
    moveit::planning_interface::MoveGroupInterface::Plan gripper_plan;
    bool success = (move_group.plan(gripper_plan) == moveit::core::MoveItErrorCode::SUCCESS);
    RCLCPP_INFO(node->get_logger(), "Visualizing gripper close %s", success ? "" : "FAILED");
    if (success) {
        RCLCPP_INFO(node->get_logger(), "Executing the gripper close trajectory.");
        move_group.execute(gripper_plan);
        rclcpp::sleep_for(std::chrono::seconds(3));
    }
    return success;
}


bool move_to_pose(rclcpp::Node::SharedPtr node, moveit::planning_interface::MoveGroupInterface& move_group, const geometry_msgs::msg::Pose& target_pose, const std::string& message) {
    RCLCPP_INFO(node->get_logger(), message.c_str());

    move_group.setPoseTarget(target_pose);
    moveit::planning_interface::MoveGroupInterface::Plan pose_plan;

    bool pose_success = (move_group.plan(pose_plan) == moveit::core::MoveItErrorCode::SUCCESS);
    RCLCPP_INFO(node->get_logger(), "Visualizing plan %s", pose_success ? "" : "FAILED");

    if (pose_success) {
        RCLCPP_INFO(node->get_logger(), "Executing the pose trajectory.");
        move_group.execute(pose_plan);
    }

    RCLCPP_INFO(node->get_logger(), "Sleeping between moves.");
    rclcpp::sleep_for(std::chrono::seconds(3));

    return pose_success;
}

int main(int argc, char** argv) {
    rclcpp::init(argc, argv);
    signal(SIGINT, signalHandler);
    rclcpp::Node::SharedPtr node = rclcpp::Node::make_shared("move_group_node");
    const std::string ARM_PLANNING_GROUP = "arm";
    moveit::planning_interface::MoveGroupInterface move_group(node, ARM_PLANNING_GROUP);
    const std::string GRIPPER_PLANNING_GROUP = "gripper";
    moveit::planning_interface::MoveGroupInterface gripper_move_group(node, GRIPPER_PLANNING_GROUP);


    double velocity_scaling_factor = 1.0;
    move_group.setMaxVelocityScalingFactor(velocity_scaling_factor);

    std::vector<double> home_position = {0.0, 0.0, 0.0, 0.0, 0.0};
    std::vector<double> position = {-0.1938, 0.3124, 0.5303};
    std::vector<double> orientation = {-0.2835, 0.1637, 0.1264, 0.9364};

    geometry_msgs::msg::Pose target_pose;

    target_pose.position.x = position[0];
    target_pose.position.y = position[1];
    target_pose.position.z = position[2];

    target_pose.orientation.x = orientation[0];
    target_pose.orientation.y = orientation[1];
    target_pose.orientation.z = orientation[2];
    target_pose.orientation.w = orientation[3];


    bool success;
    success = move_to_position(node, move_group, home_position, "/======================== Returning home =======================/");
    if (!success) {
        RCLCPP_ERROR(node->get_logger(), "Failed to move to home position!");
        return 1;
    }

    // Открываем схват
    success = open_gripper(node, gripper_move_group);
    if (!success) {
        RCLCPP_ERROR(node->get_logger(), "Failed to open the gripper!");
        return 1;
    }

    success = move_to_pose(node, move_group, target_pose, "/======================== Moving to specific pose =======================/");
    if (!success) {
        RCLCPP_ERROR(node->get_logger(), "Failed to move to specific pose!");
        return 1;
    }

    success = close_gripper(node, gripper_move_group);
    if (!success) {
        RCLCPP_ERROR(node->get_logger(), "Failed to close the gripper!");
        return 1;
    }

    success = move_to_position(node, move_group, home_position, "/======================== Returning home =======================/");
    if (!success) {
        RCLCPP_ERROR(node->get_logger(), "Failed to return to home position!");
        return 1;
    }

    rclcpp::shutdown();
    return 0;
}
